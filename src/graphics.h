/* DO NOT EDIT THIS FILE. It contains C->PostScript communication
definitions that were automatically generated from graphics.cps */

#define snews_setup() pprintf(PostScript, _CPS_snews_setup, 307)
static char _CPS_snews_setup[] = "/painted\246S\264/win framebuffer /new DefaultWindow send\264{ /FrameLabel\237Bertrand Output\264/PaintClient { /painted\246\316\246\303}\264/DestroyClient {\222X\n\246\225}\264/ClientMenu [\223ZAP{\222X\n\246\225\2463killprocessgroup } ] /new DefaultMenu send\264} win send /reshapefromuser win send /map win send { painted {\246O}\246k\246\222}\246\200win /ClientCanvas\246]\246\252/Screen\270\200\016\300\302";
#define snews_line(P$0,P$1,P$2,P$3) pprintf(PostScript, _CPS_snews_line, 11, P$0, P$1, P$2, P$3)
static char _CPS_snews_line[] = "%d%d\274%d%d\273\305";
#define snews_string(P$0,P$1,P$2) pprintf(PostScript, _CPS_snews_string, 20, P$0, P$1, P$2, P$0)
static char _CPS_snews_string[] = "%s\246\305\275\200\002\246A%d\266\246\307%d\274%s\304";
#define _CPS_SEENDEFS
#ifndef FILE
#include <stdio.h>
#endif
FILE *PostScript, *PostScriptInput;
FILE *ps_open_PostScript();
#define ps_flush_PostScript() (fflush(PostScript),(ferror(PostScript) ? exit(0) : 0))
#define ps_close_PostScript() (fclose(PostScript),PostScript = 0)
#define ps_moveto(P$0,P$1) pprintf(PostScript, _CPS_ps_moveto, 5, P$0, P$1)
extern char _CPS_ps_moveto[];
#define ps_rmoveto(P$0,P$1) pprintf(PostScript, _CPS_ps_rmoveto, 5, P$0, P$1)
extern char _CPS_ps_rmoveto[];
#define ps_lineto(P$0,P$1) pprintf(PostScript, _CPS_ps_lineto, 5, P$0, P$1)
extern char _CPS_ps_lineto[];
#define ps_rlineto(P$0,P$1) pprintf(PostScript, _CPS_ps_rlineto, 5, P$0, P$1)
extern char _CPS_ps_rlineto[];
#define ps_closepath() putc('\263', PostScript)
#define ps_arc(P$0,P$1,P$2,P$3,P$4) pprintf(PostScript, _CPS_ps_arc, 11, P$0, P$1, P$2, P$3, P$4)
extern char _CPS_ps_arc[];
#define ps_stroke() putc('\305', PostScript)
#define ps_fill() putc('\267', PostScript)
#define ps_show(P$0) pprintf(PostScript, _CPS_ps_show, 3, P$0)
extern char _CPS_ps_show[];
#define ps_cshow(P$0,L$0) pprintf(PostScript, _CPS_ps_cshow, 4, L$0, P$0)
extern char _CPS_ps_cshow[];
#define ps_findfont(P$0) pprintf(PostScript, _CPS_ps_findfont, 3, P$0)
extern char _CPS_ps_findfont[];
#define ps_scalefont(P$0) pprintf(PostScript, _CPS_ps_scalefont, 3, P$0)
extern char _CPS_ps_scalefont[];
#define ps_setfont() putc('\302', PostScript)
#define ps_gsave() putc('\272', PostScript)
#define ps_grestore() putc('\271', PostScript)
int ps_next_user_token;
#define ps_define_stack_token(u) ps_DO_defuser(u/**/_token = next_user_token++)
#define ps_define_value_token(u) (pprintf(PostScript, "/u load ", -1), \
ps_define_stack_token(u))
#define ps_define_word_token(u) (pprintf(PostScript, "/u cvx ", -1), \
ps_define_stack_token(u))
#define ps_DO_defuser(P$0) pprintf(PostScript, _CPS_ps_DO_defuser, 4, P$0)
extern char _CPS_ps_DO_defuser[];
#define ps_DO_finddef(P$0,P$1) pprintf(PostScript, _CPS_ps_DO_finddef, 7, P$0, P$1)
extern char _CPS_ps_DO_finddef[];
#define ps_finddef(font,usertoken) ps_DO_finddef(font,(usertoken)=ps_next_user_token++)
#define ps_DO_scaledef(P$0,P$1,P$2) pprintf(PostScript, _CPS_ps_DO_scaledef, 9, P$0, P$1, P$2)
extern char _CPS_ps_DO_scaledef[];
#define ps_scaledef(font,scale,usertoken) ps_DO_scaledef(font,scale,(usertoken) = ps_next_user_token++)
#define ps_usetfont(P$0) pprintf(PostScript, _CPS_ps_usetfont, 3, P$0)
extern char _CPS_ps_usetfont[];

    Status
    API
    Training
    Shop
    Blog
    About

    © 2014 GitHub, Inc.
    Terms
    Privacy
    Security
    Contact

